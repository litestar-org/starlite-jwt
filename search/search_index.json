{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Starlite JWT \u00b6 This library offers simple JWT authentication for Starlite . Installation \u00b6 pip install starlite-jwt This library uses the excellent python-jose library, which supports multiple cryptographic backends. You can install either pyca/cryptography or pycryptodome , and it will be used as the backend automatically. Note that if you want to use a certificate based encryption scheme, you must install one of these backends - please refer to the python-jose readme for more details. Example \u00b6 import os from typing import Any , Optional from uuid import UUID , uuid4 from pydantic import BaseModel , EmailStr from starlite import OpenAPIConfig , Request , Response , Starlite , get from starlite_jwt import JWTAuth , Token # Let's assume we have a User model that is a pydantic model. # This though is not required - we need some sort of user class - # but it can be any arbitrary value, e.g. an SQLAlchemy model, a representation of a MongoDB etc. class User ( BaseModel ): id : UUID name : str email : EmailStr # The JWTAuth package requires a handler callable that takes a unique identifier, and returns the 'User' # instance correlating to it. # # The identifier is the 'sub' key of the JWT, and it usually correlates to a user ID. # It can be though any arbitrary value you decide upon - as long as the handler function provided # can receive this value and return the model instance for it. # # Note: The callable can be either sync or async - both will work. async def retrieve_user_handler ( unique_identifier : str ) -> Optional [ User ]: # logic here to retrieve the user instance ... # The minimal configuration required for the library is the callable for the 'retrieve_user_handler' key, and a string # value for the token secret. # # Important: secrets should never be hardcoded. Its best practice to pass the secret using ENV. # # Tip: It's also a good idea to use the pydantic settings management functionality jwt_auth = JWTAuth ( retrieve_user_handler = retrieve_user_handler , token_secret = os . environ . get ( \"JWT_SECRET\" , \"abcd123\" ), # we are specifying which endpoints should be excluded from authentication. In this case the login endpoint # and our openAPI docs. exclude = [ \"/login\" , \"/schema\" ], ) # Given an instance of 'JWTAuth' we can create a login handler function: @get ( \"/login\" ) def login_handler () -> Response [ User ]: # we have a user instance - probably by retrieving it from persistence using another lib. # what's important for our purposes is to have an identifier: user = User ( name = \"Moishe Zuchmir\" , email = \"zuchmir@moishe.com\" , id = uuid4 ()) response = jwt_auth . login ( identifier = str ( user . id ), response_body = user ) # you can do whatever you want to update the response instance here # e.g. response.set_cookie(...) return response # We also have some other routes, for example: @get ( \"/some-path\" ) def some_route_handler ( request : Request [ User , Token ]) -> Any : # request.user is set to the instance of user returned by the middleware assert isinstance ( request . user , User ) # request.auth is the instance of 'starlite_jwt.Token' created from the data encoded in the auth header assert isinstance ( request . auth , Token ) # do stuff ... # We add the jwt security schema to the OpenAPI config. openapi_config = OpenAPIConfig ( title = \"My API\" , version = \"1.0.0\" , components = [ jwt_auth . openapi_components ], security = [ jwt_auth . security_requirement ], ) # We initialize the app instance, passing to it the 'jwt_auth.middleware' and the 'openapi_config'. app = Starlite ( route_handlers = [ login_handler , some_route_handler ], middleware = [ jwt_auth . middleware ], openapi_config = openapi_config , ) Contributing \u00b6 Starlite and all its official libraries is open to contributions big and small. You can always join our discord server or join our Matrix space to discuss contributions and project maintenance. For guidelines on how to contribute to this library, please see the contribution guide in the repository's root.","title":"Starlite JWT"},{"location":"#starlite-jwt","text":"This library offers simple JWT authentication for Starlite .","title":"Starlite JWT"},{"location":"#installation","text":"pip install starlite-jwt This library uses the excellent python-jose library, which supports multiple cryptographic backends. You can install either pyca/cryptography or pycryptodome , and it will be used as the backend automatically. Note that if you want to use a certificate based encryption scheme, you must install one of these backends - please refer to the python-jose readme for more details.","title":"Installation"},{"location":"#example","text":"import os from typing import Any , Optional from uuid import UUID , uuid4 from pydantic import BaseModel , EmailStr from starlite import OpenAPIConfig , Request , Response , Starlite , get from starlite_jwt import JWTAuth , Token # Let's assume we have a User model that is a pydantic model. # This though is not required - we need some sort of user class - # but it can be any arbitrary value, e.g. an SQLAlchemy model, a representation of a MongoDB etc. class User ( BaseModel ): id : UUID name : str email : EmailStr # The JWTAuth package requires a handler callable that takes a unique identifier, and returns the 'User' # instance correlating to it. # # The identifier is the 'sub' key of the JWT, and it usually correlates to a user ID. # It can be though any arbitrary value you decide upon - as long as the handler function provided # can receive this value and return the model instance for it. # # Note: The callable can be either sync or async - both will work. async def retrieve_user_handler ( unique_identifier : str ) -> Optional [ User ]: # logic here to retrieve the user instance ... # The minimal configuration required for the library is the callable for the 'retrieve_user_handler' key, and a string # value for the token secret. # # Important: secrets should never be hardcoded. Its best practice to pass the secret using ENV. # # Tip: It's also a good idea to use the pydantic settings management functionality jwt_auth = JWTAuth ( retrieve_user_handler = retrieve_user_handler , token_secret = os . environ . get ( \"JWT_SECRET\" , \"abcd123\" ), # we are specifying which endpoints should be excluded from authentication. In this case the login endpoint # and our openAPI docs. exclude = [ \"/login\" , \"/schema\" ], ) # Given an instance of 'JWTAuth' we can create a login handler function: @get ( \"/login\" ) def login_handler () -> Response [ User ]: # we have a user instance - probably by retrieving it from persistence using another lib. # what's important for our purposes is to have an identifier: user = User ( name = \"Moishe Zuchmir\" , email = \"zuchmir@moishe.com\" , id = uuid4 ()) response = jwt_auth . login ( identifier = str ( user . id ), response_body = user ) # you can do whatever you want to update the response instance here # e.g. response.set_cookie(...) return response # We also have some other routes, for example: @get ( \"/some-path\" ) def some_route_handler ( request : Request [ User , Token ]) -> Any : # request.user is set to the instance of user returned by the middleware assert isinstance ( request . user , User ) # request.auth is the instance of 'starlite_jwt.Token' created from the data encoded in the auth header assert isinstance ( request . auth , Token ) # do stuff ... # We add the jwt security schema to the OpenAPI config. openapi_config = OpenAPIConfig ( title = \"My API\" , version = \"1.0.0\" , components = [ jwt_auth . openapi_components ], security = [ jwt_auth . security_requirement ], ) # We initialize the app instance, passing to it the 'jwt_auth.middleware' and the 'openapi_config'. app = Starlite ( route_handlers = [ login_handler , some_route_handler ], middleware = [ jwt_auth . middleware ], openapi_config = openapi_config , )","title":"Example"},{"location":"#contributing","text":"Starlite and all its official libraries is open to contributions big and small. You can always join our discord server or join our Matrix space to discuss contributions and project maintenance. For guidelines on how to contribute to this library, please see the contribution guide in the repository's root.","title":"Contributing"},{"location":"reference/SUMMARY/","text":"starlite_jwt","title":"SUMMARY"},{"location":"reference/starlite_jwt/","text":"JWTAuth \u00b6 Bases: BaseModel JWT Authentication Configuration. This class is the main entry point to the library, and it includes methods to create the middleware, provide login functionality, and create OpenAPI documentation. algorithm class-attribute \u00b6 algorithm : str = 'HS256' Algorithm to use for JWT hashing. auth_header class-attribute \u00b6 auth_header : str = 'Authorization' Request header key from which to retrieve the token. E.g. 'Authorization' or 'X-Api-Key'. default_token_expiration class-attribute \u00b6 default_token_expiration : timedelta = timedelta ( days = 1 ) The default value for token expiration. exclude class-attribute \u00b6 exclude : Optional [ Union [ str , List [ str ]]] = None A pattern or list of patterns to skip in the authentication middleware. openapi_security_scheme_name class-attribute \u00b6 openapi_security_scheme_name : str = 'BearerToken' The value to use for the OpenAPI security scheme and security requirements retrieve_user_handler class-attribute \u00b6 retrieve_user_handler : RetrieveUserHandler Callable that receives the 'sub' value of a token, which represents the 'subject' of the token (usually a user ID or equivalent value) and returns a 'user' value. Notes: - User can be any arbitrary value, - The callable can be sync or async. token_secret class-attribute \u00b6 token_secret : str Key with which to generate the token hash. Notes: - This value should be kept as a secret and the standard practice is to inject it into the environment. create_token \u00b6 create_token ( identifier , token_expiration = None , token_issuer = None , token_audience = None , token_unique_jwt_id = None , ) Creates a Token instance from the passed in parameters, persists and returns it. Parameters: Name Type Description Default identifier str Unique identifier of the token subject. Usually this is a user ID or equivalent kind of value. required token_expiration Optional [ timedelta ] An optional timedelta for the token expiration. None token_issuer Optional [ str ] An optional value of the token 'iss' field. None token_audience Optional [ str ] An optional value for the token 'aud' field. None token_unique_jwt_id Optional [ str ] An optional value for the token 'jti' field. None Returns: Type Description str The created token. login \u00b6 login ( identifier , * , response_body = None , response_media_type = MediaType . JSON , response_status_code = HTTP_201_CREATED , token_expiration = None , token_issuer = None , token_audience = None , token_unique_jwt_id = None ) Create a response with a JWT header. Calls the 'JWTAuth.store_token_handler' to persist the token 'sub'. Parameters: Name Type Description Default identifier str Unique identifier of the token subject. Usually this is a user ID or equivalent kind of value. required response_body Optional [ Any ] An optional response body to send. None response_media_type Union [ str , MediaType ] An optional 'Content-Type'. Defaults to 'application/json'. MediaType.JSON response_status_code int An optional status code for the response. Defaults to '201 Created'. HTTP_201_CREATED token_expiration Optional [ timedelta ] An optional timedelta for the token expiration. None token_issuer Optional [ str ] An optional value of the token 'iss' field. None token_audience Optional [ str ] An optional value for the token 'aud' field. None token_unique_jwt_id Optional [ str ] An optional value for the token 'jti' field. None Returns: Type Description Response [ Any ] A Response instance. middleware property \u00b6 middleware () Creates JWTAuthenticationMiddleware wrapped in Starlite's DefineMiddleware . Returns: Type Description DefineMiddleware An instance of DefineMiddleware . openapi_components property \u00b6 openapi_components () Creates OpenAPI documentation for the JWT auth schema used. Returns: Type Description Components An Components instance. security_requirement property \u00b6 security_requirement () Returns: Type Description SecurityRequirement An OpenAPI 3.1 SecurityRequirement dictionary. validate_retrieve_user_handler \u00b6 validate_retrieve_user_handler ( value ) This validator ensures that the passed in value does not get bound. Parameters: Name Type Description Default value RetrieveUserHandler A callable fulfilling the RetrieveUserHandler type. required Returns: Type Description Callable [[ str ], Awaitable [ Any ]] An instance of AsyncCallable wrapping the callable. Token \u00b6 Bases: BaseModel This class represents a JWT token. aud class-attribute \u00b6 aud : Optional [ str ] = None Audience - intended audience. exp class-attribute \u00b6 exp : datetime Expiration - datetime for token expiration. iat class-attribute \u00b6 iat : datetime = Field ( default_factory = lambda : _normalize_datetime ( datetime . now ( timezone . utc ))) Issued at - should always be current now. iss class-attribute \u00b6 iss : Optional [ str ] = None Issuer - optional unique identifier for the issuer. jti class-attribute \u00b6 jti : Optional [ str ] = None JWT ID - a unique identifier of the JWT between different issuers. sub class-attribute \u00b6 sub : constr ( min_length = 1 ) Subject - usually a unique identifier of the user or equivalent entity. decode staticmethod \u00b6 decode ( encoded_token , secret , algorithm ) Decodes a passed in token string and returns a Token instance. Parameters: Name Type Description Default encoded_token str A base64 string containing an encoded JWT. required secret Union [ str , Dict [ str , str ]] The secret with which the JWT is encoded. It may optionally required algorithm str The algorithm used to encode the JWT. required Returns: Type Description Token A decoded Token instance. Raises: Type Description [ NotAuthorizedException ][ starlite . exceptions . NotAuthorizedException ] If token is invalid. encode \u00b6 encode ( secret , algorithm ) Encodes the token instance into a string. Parameters: Name Type Description Default secret str The secret with which the JWT is encoded. required algorithm str The algorithm used to encode the JWT. required Returns: Type Description str An encoded token string. Raises: Type Description [ ImproperlyConfiguredException ][ starlite . exceptions . ImproperlyConfiguredException ] If encoding fails. validate_exp \u00b6 validate_exp ( value ) Ensures that 'exp' value is a future datetime. Parameters: Name Type Description Default value datetime A datetime instance. required Raises: Type Description ValueError if value is not a future datetime instance. Returns: Type Description datetime The validated datetime. validate_iat \u00b6 validate_iat ( value ) Ensures that 'iat' value is a past or current datetime. Parameters: Name Type Description Default value datetime A datetime instance. required Raises: Type Description ValueError if value is not a past or current datetime instance. Returns: Type Description datetime The validated datetime.","title":"starlite_jwt"},{"location":"reference/starlite_jwt/#starlite_jwt.JWTAuth","text":"Bases: BaseModel JWT Authentication Configuration. This class is the main entry point to the library, and it includes methods to create the middleware, provide login functionality, and create OpenAPI documentation.","title":"JWTAuth"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.algorithm","text":"algorithm : str = 'HS256' Algorithm to use for JWT hashing.","title":"algorithm"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.auth_header","text":"auth_header : str = 'Authorization' Request header key from which to retrieve the token. E.g. 'Authorization' or 'X-Api-Key'.","title":"auth_header"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.default_token_expiration","text":"default_token_expiration : timedelta = timedelta ( days = 1 ) The default value for token expiration.","title":"default_token_expiration"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.exclude","text":"exclude : Optional [ Union [ str , List [ str ]]] = None A pattern or list of patterns to skip in the authentication middleware.","title":"exclude"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.openapi_security_scheme_name","text":"openapi_security_scheme_name : str = 'BearerToken' The value to use for the OpenAPI security scheme and security requirements","title":"openapi_security_scheme_name"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.retrieve_user_handler","text":"retrieve_user_handler : RetrieveUserHandler Callable that receives the 'sub' value of a token, which represents the 'subject' of the token (usually a user ID or equivalent value) and returns a 'user' value. Notes: - User can be any arbitrary value, - The callable can be sync or async.","title":"retrieve_user_handler"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.token_secret","text":"token_secret : str Key with which to generate the token hash. Notes: - This value should be kept as a secret and the standard practice is to inject it into the environment.","title":"token_secret"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.create_token","text":"create_token ( identifier , token_expiration = None , token_issuer = None , token_audience = None , token_unique_jwt_id = None , ) Creates a Token instance from the passed in parameters, persists and returns it. Parameters: Name Type Description Default identifier str Unique identifier of the token subject. Usually this is a user ID or equivalent kind of value. required token_expiration Optional [ timedelta ] An optional timedelta for the token expiration. None token_issuer Optional [ str ] An optional value of the token 'iss' field. None token_audience Optional [ str ] An optional value for the token 'aud' field. None token_unique_jwt_id Optional [ str ] An optional value for the token 'jti' field. None Returns: Type Description str The created token.","title":"create_token()"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.login","text":"login ( identifier , * , response_body = None , response_media_type = MediaType . JSON , response_status_code = HTTP_201_CREATED , token_expiration = None , token_issuer = None , token_audience = None , token_unique_jwt_id = None ) Create a response with a JWT header. Calls the 'JWTAuth.store_token_handler' to persist the token 'sub'. Parameters: Name Type Description Default identifier str Unique identifier of the token subject. Usually this is a user ID or equivalent kind of value. required response_body Optional [ Any ] An optional response body to send. None response_media_type Union [ str , MediaType ] An optional 'Content-Type'. Defaults to 'application/json'. MediaType.JSON response_status_code int An optional status code for the response. Defaults to '201 Created'. HTTP_201_CREATED token_expiration Optional [ timedelta ] An optional timedelta for the token expiration. None token_issuer Optional [ str ] An optional value of the token 'iss' field. None token_audience Optional [ str ] An optional value for the token 'aud' field. None token_unique_jwt_id Optional [ str ] An optional value for the token 'jti' field. None Returns: Type Description Response [ Any ] A Response instance.","title":"login()"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.middleware","text":"middleware () Creates JWTAuthenticationMiddleware wrapped in Starlite's DefineMiddleware . Returns: Type Description DefineMiddleware An instance of DefineMiddleware .","title":"middleware()"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.openapi_components","text":"openapi_components () Creates OpenAPI documentation for the JWT auth schema used. Returns: Type Description Components An Components instance.","title":"openapi_components()"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.security_requirement","text":"security_requirement () Returns: Type Description SecurityRequirement An OpenAPI 3.1 SecurityRequirement dictionary.","title":"security_requirement()"},{"location":"reference/starlite_jwt/#starlite_jwt.jwt_auth.JWTAuth.validate_retrieve_user_handler","text":"validate_retrieve_user_handler ( value ) This validator ensures that the passed in value does not get bound. Parameters: Name Type Description Default value RetrieveUserHandler A callable fulfilling the RetrieveUserHandler type. required Returns: Type Description Callable [[ str ], Awaitable [ Any ]] An instance of AsyncCallable wrapping the callable.","title":"validate_retrieve_user_handler()"},{"location":"reference/starlite_jwt/#starlite_jwt.Token","text":"Bases: BaseModel This class represents a JWT token.","title":"Token"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.aud","text":"aud : Optional [ str ] = None Audience - intended audience.","title":"aud"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.exp","text":"exp : datetime Expiration - datetime for token expiration.","title":"exp"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.iat","text":"iat : datetime = Field ( default_factory = lambda : _normalize_datetime ( datetime . now ( timezone . utc ))) Issued at - should always be current now.","title":"iat"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.iss","text":"iss : Optional [ str ] = None Issuer - optional unique identifier for the issuer.","title":"iss"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.jti","text":"jti : Optional [ str ] = None JWT ID - a unique identifier of the JWT between different issuers.","title":"jti"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.sub","text":"sub : constr ( min_length = 1 ) Subject - usually a unique identifier of the user or equivalent entity.","title":"sub"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.decode","text":"decode ( encoded_token , secret , algorithm ) Decodes a passed in token string and returns a Token instance. Parameters: Name Type Description Default encoded_token str A base64 string containing an encoded JWT. required secret Union [ str , Dict [ str , str ]] The secret with which the JWT is encoded. It may optionally required algorithm str The algorithm used to encode the JWT. required Returns: Type Description Token A decoded Token instance. Raises: Type Description [ NotAuthorizedException ][ starlite . exceptions . NotAuthorizedException ] If token is invalid.","title":"decode()"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.encode","text":"encode ( secret , algorithm ) Encodes the token instance into a string. Parameters: Name Type Description Default secret str The secret with which the JWT is encoded. required algorithm str The algorithm used to encode the JWT. required Returns: Type Description str An encoded token string. Raises: Type Description [ ImproperlyConfiguredException ][ starlite . exceptions . ImproperlyConfiguredException ] If encoding fails.","title":"encode()"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.validate_exp","text":"validate_exp ( value ) Ensures that 'exp' value is a future datetime. Parameters: Name Type Description Default value datetime A datetime instance. required Raises: Type Description ValueError if value is not a future datetime instance. Returns: Type Description datetime The validated datetime.","title":"validate_exp()"},{"location":"reference/starlite_jwt/#starlite_jwt.token.Token.validate_iat","text":"validate_iat ( value ) Ensures that 'iat' value is a past or current datetime. Parameters: Name Type Description Default value datetime A datetime instance. required Raises: Type Description ValueError if value is not a past or current datetime instance. Returns: Type Description datetime The validated datetime.","title":"validate_iat()"}]}